#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <mpi.h>

#define DT 1
#define NPRE 2800
#define NPOST 20
#define NSPIKE 60
#define VTHRESH 400
#define VRESET -5

float max(float a, float b){
  return (a<b) ? b: a;
}

float min(float a, float b){
  return (a<b) ? a: b;
}

float clamp(float v, float m, float M){
  return max(min(v,M),m);
}

float solveRD(float x0, float a, float b){
  return x0*exp(-a*DT)+b;
}

int genData (int size, int rank, int *timings, float *weights, float v){
  int i, j, sSum, max=0;
  float R, lam, jitter;
  lam = (1/v)*1000.0;

  srand((unsigned)rank+time(0));

  for (i=0;i<size;i++){
    sSum=0;
    for (j=0;j<NSPIKE;j++){
      R=rand()/(float)(RAND_MAX);
      sSum+=(int)(-1*lam*log(R));
      timings[i*NSPIKE+j]=sSum;
    }
    for (j=0;j<NPOST;j++)
      weights[j]=rand()/(float)(RAND_MAX);
    if (sSum>max) max = sSum;
  }
  //printf("%d\n",max);
  return max;
}

int main(int argc, char *argv[]){
  FILE *output;
  double start,end;

  int rank,size,localSize,i,j,time,tMax=0,tmp=0,master=0;
  float v=5.0,nu=0.2,mu=0.8,wMax=1.0,A=50.0/1000.0,B=1.0,C=0.5,D=20.0/1000.0;
  float Apost=25.0/1000.0,Cpost=0,tau,tauM=50.0,tauS=20.0,inhib;

  float *xCum=calloc(NPOST,sizeof(float)),*V=calloc(NPOST,sizeof(float));
  float *hostCum=malloc(NPOST*sizeof(float));

  MPI_Init(&argc,&argv);
  MPI_Comm_size(MPI_COMM_WORLD,&size);
  MPI_Comm_rank(MPI_COMM_WORLD,&rank);

  MPI_Barrier(MPI_COMM_WORLD);
  start=MPI_Wtime();
  
  localSize = (int)(NPRE/(size-1));
  float dW[NPOST*localSize],W[NPOST*localSize];
  float *xPre=calloc(localSize,sizeof(float)),x;
  float *xPost=calloc(NPOST,sizeof(float));
  int timings[localSize*NSPIKE];
  int sPre[localSize],sPost[NPOST];

  tau = (tauM*tauS)/(tauM-tauS);
  
  if (rank != master){
    tmp=genData(localSize,rank,timings,W,v);
  }
  else
    output = fopen("dat.out","w");
  //printf("%d\n",tmp);
  MPI_Allreduce(&tmp,&tMax,1,MPI_INT,MPI_MAX,MPI_COMM_WORLD);

  if (rank==master)
    printf("%d\n",tMax);
  
  //Now start the time loop

  for (time=0;time<tMax;time++){
    //if (rank==master)
    //fprintf(output,"%d\t%lf\n",time,x);

    for (j=0;j<NPOST;j++)
      xCum[j]=0;
    if (rank != master){
      for (i=0;i<localSize;i++){
	for (j=0;j<NSPIKE;j++){
	  sPre[i] = (timings[i*NSPIKE+j] == time);
	  if (sPre[i]) break;
	}
	for (j=0;j<NPOST;j++)
	  dW[20*i+j] = nu*(pow((wMax-W[NPOST*i+j]),mu)*xPre[i]*sPost[j]
			   - pow(W[NPOST*i+j],mu)*xPost[j]*sPre[i]);
	xPre[i] = solveRD(xPre[i],A,sPre[i]*(B-C*xPre[i]));
	//printf("%lf\n",xPre[i]);
	for (j=0;j<NPOST;j++)
	  xCum[j] += xPre[i]*W[20*i+j];
      }
    }
    //x=xPre[0];
    //if (rank==2) MPI_Send(&x,1,MPI_FLOAT,master,13,MPI_COMM_WORLD);
    //if (rank==0) MPI_Recv(&x,1,MPI_FLOAT,2,13,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
    MPI_Reduce(xCum,hostCum,20,MPI_FLOAT,MPI_SUM,master,MPI_COMM_WORLD);
    /*if (rank==master&&time==42){
      for (j=0;j<NPOST;j++)
	printf("%lf\n",hostCum[j]);
	}*/
    if (rank!=master){
      for (i=0;i<localSize;i++)
	for (j=0;j<20;j++)
	  W[i*20+j]=clamp((W[i*20+j]+dW[i*20+j]),(float)0,(float)1);
      continue;
    }
    else{
      for (j=0;j<NPOST;j++){
	inhib=0;
	hostCum[0]*=2;
	for (i=0;i<NPOST;i++)
	  if (i!=j) inhib+=xPost[i];
	V[j]=solveRD(V[j],D,(hostCum[j]-inhib)*
		     tau*solveRD(1,D,0)-solveRD(1,A,0));
	sPost[j] = (V[j]>VTHRESH);
	if (sPost[j])
	  V[j]=VRESET;
      }
      for (j=0;j<NPOST;j++)
	xPost[j]=solveRD(xPost[j],Apost,
			 sPost[j]*(B-Cpost*xPost[j]));
    }
  }
  if (rank==master) fclose(output);
  
  MPI_Barrier(MPI_COMM_WORLD);
  end=MPI_Wtime();

  if (rank==0)
    printf("Runtime = %lf\n", end-start);
  
  MPI_Finalize();
  return 1;
}
